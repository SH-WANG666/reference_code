<?php

namespace Drupal\cas_server\Ticket;

use Drupal\Component\Datetime\TimeInterface;
use Drupal\Component\Utility\Crypt;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Session\AccountProxyInterface;
use Drupal\cas_server\ConfigHelper;
use Drupal\cas_server\Event\CasServerTicketAlterEvent;
use Drupal\cas_server\TicketStorageInterface;
use Symfony\Component\HttpFoundation\RequestStack;
use Symfony\Contracts\EventDispatcher\EventDispatcherInterface;

/**
 * Build appropriate Tickets based on inputs.
 */
class TicketFactory {

  /**
   * The unique identifier for a user.
   *
   * @var string
   */
  protected $uniqueId = NULL;

  /**
   * Constructs a new TicketFactory object.
   */
  public function __construct(
    protected ConfigHelper $configHelper,
    protected TicketStorageInterface $ticketStore,
    protected AccountProxyInterface $currentUser,
    protected EventDispatcherInterface $eventDispatcher,
    protected TimeInterface $time,
    protected RequestStack $requestStack,
  ) {
  }

  /**
   * Return existing or generate new unique identifier stored in session.
   *
   * @param bool $generate
   *   Set to FALSE to prevent a new ID from being generated.
   *
   * @return ?string
   *   The unique id originally generated by Crypt::randomBytesBase64().
   */
  public function getUniqueId(bool $generate = TRUE): ?string {
    if ($this->uniqueId) {
      return $this->uniqueId;
    }

    $session = $this->requestStack->getCurrentRequest()->getSession();
    if ($session->has('cas_server.user.identifier')) {
      return $this->uniqueId = $session->get('cas_server.user.identifier');
    }

    if ($generate) {
      $this->uniqueId = Crypt::randomBytesBase64();
      $session->set('cas_server.user.identifier', $this->uniqueId);
    }

    return $this->uniqueId;
  }

  /**
   * Create a login ticket.
   *
   * @return LoginTicket
   *   The created and saved LT.
   */
  public function createLoginTicket() {
    $lt = new LoginTicket(
      'LT-' . Crypt::randomBytesBase64(32),
      $this->configHelper->getLoginTicketTimeout($this->time->getRequestTime()),
    );

    $event = new CasServerTicketAlterEvent($lt);
    $this->eventDispatcher->dispatch(
      $event,
      CasServerTicketAlterEvent::CAS_SERVER_TICKET_ALTER_EVENT
    );
    $this->ticketStore->storeLoginTicket($lt);

    return $lt;
  }

  /**
   * Create a proxy granting ticket.
   *
   * @param array $proxy_chain
   *   The proxy chain.
   *
   * @return ProxyGrantingTicket
   *   The created and saved PGT.
   */
  public function createProxyGrantingTicket($proxy_chain) {
    $id = 'PGT-';
    $id .= Crypt::randomBytesBase64(32);
    $expiration_time = $this->time->getRequestTime()
      + $this->configHelper->getProxyGrantingTicketTimeout();
    $session = $this->getUniqueId();
    $uid = $this->currentUser->id();
    $name = $this->getUsernameAttribute($this->currentUser);

    $pgt = new ProxyGrantingTicket(
      $id,
      $expiration_time,
      $session,
      $uid,
      $name,
      $proxy_chain
    );
    $event = new CasServerTicketAlterEvent($pgt);
    $this->eventDispatcher->dispatch(
      $event,
      CasServerTicketAlterEvent::CAS_SERVER_TICKET_ALTER_EVENT
    );
    $this->ticketStore->storeProxyGrantingTicket($pgt);

    return $pgt;
  }

  /**
   * Create a service ticket.
   *
   * @param string $service_string
   *   The service the ticket is being issued for.
   * @param bool $renew
   *   If this ticket was generated by directly supplied credentials.
   *
   * @return ServiceTicket
   *   The created and saved ServiceTicket.
   */
  public function createServiceTicket($service_string, $renew) {
    $id = 'ST-';
    $id .= Crypt::randomBytesBase64(32);
    $expiration_time = $this->time->getRequestTime()
      + $this->configHelper->getServiceTicketTimeout();
    $session = $this->getUniqueId();
    $uid = $this->currentUser->id();
    $name = $this->getUsernameAttribute($this->currentUser);

    $st = new ServiceTicket(
      $id,
      $expiration_time,
      $session,
      $uid,
      $name,
      $service_string,
      $renew
    );
    $event = new CasServerTicketAlterEvent($st);
    $this->eventDispatcher->dispatch(
      $event,
      CasServerTicketAlterEvent::CAS_SERVER_TICKET_ALTER_EVENT
    );
    $this->ticketStore->storeServiceTicket($st);

    return $st;
  }

  /**
   * Create a proxy ticket.
   *
   * @param string $service_string
   *   The service the ticket is being issued for.
   * @param bool $renew
   *   If this ticket was generated by directly supplied credentials.
   * @param array $proxy_chain
   *   The proxy chain.
   * @param string $session
   *   The ID of the session who originally requested the requesting pgt.
   * @param int $uid
   *   The uid of the of user who originally requested the pgt.
   * @param string $name
   *   The username of the user who originally requested the requesting pgt.
   *
   * @return ProxyTicket
   *   The created and saved ProxyTicket.
   */
  public function createProxyTicket(
    $service_string,
    $renew,
    $proxy_chain,
    $session,
    $uid,
    $name,
  ) {
    $id = 'PT-';
    $id .= Crypt::randomBytesBase64(32);
    $expiration_time = $this->time->getRequestTime()
      + $this->configHelper->getProxyTicketTimeout();

    $pt = new ProxyTicket(
      $id,
      $expiration_time,
      $session,
      $uid,
      $name,
      $service_string,
      $renew,
      $proxy_chain
    );
    $event = new CasServerTicketAlterEvent($pt);
    $this->eventDispatcher->dispatch(
      $event,
      CasServerTicketAlterEvent::CAS_SERVER_TICKET_ALTER_EVENT
    );
    $this->ticketStore->storeProxyTicket($pt);

    return $pt;
  }

  /**
   * Create a ticket granting ticket.
   *
   * @return TicketGrantingTicket
   *   The created and saved TicketGrantingTicket.
   */
  public function createTicketGrantingTicket() {
    $id = 'TGT-';
    $id .= Crypt::randomBytesBase64(32);
    $expiration_time = $this->time->getRequestTime()
      + $this->configHelper->getTicketGrantingTicketTimeout();
    $session = $this->getUniqueId();
    $uid = $this->currentUser->id();
    $name = $this->getUsernameAttribute($this->currentUser);

    $tgt = new TicketGrantingTicket(
      $id,
      $expiration_time,
      $session,
      $uid,
      $name
    );
    $event = new CasServerTicketAlterEvent($tgt);
    $this->eventDispatcher->dispatch(
      $event,
      CasServerTicketAlterEvent::CAS_SERVER_TICKET_ALTER_EVENT
    );
    $this->ticketStore->storeTicketGrantingTicket($tgt);

    return $tgt;
  }

  /**
   * Get the username for a ticket.
   *
   * @param \Drupal\Core\Session\AccountInterface $account
   *   The account to get the username for.
   *
   * @return string
   *   The username.
   */
  public function getUsernameAttribute(AccountInterface $account) {
    if ($this->configHelper->getTicketUsernameAttribute() == 'mail') {
      $name = $account->getEmail();
    }
    elseif ($this->configHelper->getTicketUsernameAttribute() == 'uid') {
      $name = $account->id();
    }
    else {
      $name = $account->getAccountName();
    }

    return $name;
  }

}
